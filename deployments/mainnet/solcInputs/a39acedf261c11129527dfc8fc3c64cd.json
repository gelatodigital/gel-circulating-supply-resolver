{
  "language": "Solidity",
  "sources": {
    "contracts/GelCirculatingSupplyResolver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    IERC2ILinearVestingHubHelper\n} from \"./interfaces/ILinearVestingHubHelper.sol\";\n\n/**\n * @title GelCirculatingSupplyResolver\n * @dev Returns the current circluating GEL token supply\n * @author hilmarx (Hilmar Orth) - Gelato Network\n */\ncontract GelCirculatingSupplyResolver {\n    address public constant GEL_DAO =\n        0x4C64ce7C270E1316692067771bbb0DCe6Ec69B7C;\n    address public constant GEL_VESTING_HUB_HELPER =\n        0x766F4416dc7BB3a2a38240176F1427E01291FAeE;\n    address public constant GEL_VESTING_TREASURY =\n        0x163407FDA1a93941358c1bfda39a868599553b6D;\n    address public constant GEL = 0x15b7c0c907e4C6b9AdaAaabC300C08991D6CEA05;\n    uint256 public constant VESTING_START = 1631548800; // 13 September 2021 16:00:00 GMT\n    uint256 public constant VESTING_DURATION = 126230400; // 4 years\n\n    /**\n     * @notice Returns the current circulating GEL supply\n     * @return circulatingSupplyWei Circulating supply of GEL in wei.\n     * @return circulatingSupply Parsed circulating supply of GEL.\n     */\n    function returnCirculatingGelSupply()\n        external\n        view\n        returns (uint256 circulatingSupplyWei, uint256 circulatingSupply)\n    {\n        circulatingSupplyWei = IERC20(GEL).totalSupply();\n\n        uint256 gelDaoBalance = IERC20(GEL).balanceOf(GEL_DAO);\n        uint256 gelVestingTreasuryBalance = IERC20(GEL).balanceOf(\n            GEL_VESTING_TREASURY\n        );\n\n        // DAOs token are deducted from circulating supply\n        circulatingSupplyWei -= gelDaoBalance;\n\n        // Deduct locked tokens in GEL Vesting Hub\n        uint256 lockedVestingHubTokens = IERC2ILinearVestingHubHelper(\n            GEL_VESTING_HUB_HELPER\n        ).calcTotalUnvestedTokens();\n\n        circulatingSupplyWei -= lockedVestingHubTokens;\n\n        // Deduct to be locked tokens in GEL Vesting Treasury\n        uint256 lockedGelVestinTreasuryTokens = gelVestingTreasuryBalance -\n            _getVestedTkns(\n                gelVestingTreasuryBalance,\n                VESTING_START,\n                VESTING_DURATION\n            );\n        circulatingSupplyWei -= lockedGelVestinTreasuryTokens;\n        circulatingSupply = circulatingSupplyWei / 10**18;\n    }\n\n    // solhint-disable not-rely-on-time\n    function _getVestedTkns(\n        uint256 tknBalance_,\n        uint256 startDate_,\n        uint256 duration_\n    ) private view returns (uint256) {\n        return ((tknBalance_) * (block.timestamp - startDate_)) / duration_;\n    }\n}\n"
    },
    "contracts/interfaces/ILinearVestingHubHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC2ILinearVestingHubHelper {\n    function calcTotalUnvestedTokens()\n        external\n        view\n        returns (uint256 totalUnvestedTkn);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
